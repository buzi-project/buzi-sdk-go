/*
Swagger Petstore - OpenAPI 3.0

This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

API version: 1.0.0
Contact: edson@michaque.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buzi

import (
	"encoding/json"
)

// Pricing struct for Pricing
type Pricing struct {
	CostPerUnit *float32 `json:"cost_per_unit,omitempty" yaml:"cost_per_unit,omitempty"`
}



// NewPricingWithDefaults instantiates a new Pricing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPricingWithDefaults() *Pricing {
	this := Pricing{}
	return &this
}

// GetCostPerUnit returns the CostPerUnit field value if set, zero value otherwise.
func (o *Pricing) GetCostPerUnit() float32 {
	if o == nil || o.CostPerUnit == nil {
		var ret float32
		return ret
	}
	return *o.CostPerUnit
}

// GetCostPerUnitOk returns a tuple with the CostPerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pricing) GetCostPerUnitOk() (*float32, bool) {
	if o == nil || o.CostPerUnit == nil {
		return nil, false
	}
	return o.CostPerUnit, true
}

// HasCostPerUnit returns a boolean if a field has been set.
func (o *Pricing) HasCostPerUnit() bool {
	if o != nil && o.CostPerUnit != nil {
		return true
	}

	return false
}

// SetCostPerUnit gets a reference to the given float32 and assigns it to the CostPerUnit field.
func (o *Pricing) SetCostPerUnit(v float32) {
	o.CostPerUnit = &v
}

func (o Pricing) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CostPerUnit != nil {
		toSerialize["cost_per_unit"] = o.CostPerUnit
	}
	return json.Marshal(toSerialize)
}

type OptionalPricing struct {
	value *Pricing
	set bool
}

func (v OptionalPricing) Get() *Pricing {
	return v.value
}

func (v *OptionalPricing) Set(val *Pricing) {
	v.value = val
	v.set = true
}

func (v OptionalPricing) IsSet() bool {
	return v.set
}

func (v *OptionalPricing) Unset() {
	v.value = nil
	v.set = false
}

func NewOptionalPricing(val *Pricing) *OptionalPricing {
	return &OptionalPricing{value: val, set: true}
}

func (v OptionalPricing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *OptionalPricing) UnmarshalJSON(src []byte) error {
	v.set = true
	return json.Unmarshal(src, &v.value)
}


