/*
Swagger Petstore - OpenAPI 3.0

This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

API version: 1.0.0
Contact: edson@michaque.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buzi

import (
	"encoding/json"
	"time"
)

// Message struct for Message
type Message struct {
	Id *string `json:"id,omitempty" yaml:"id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	Status *string `json:"status,omitempty" yaml:"status,omitempty"`
	Reason *string `json:"reason,omitempty" yaml:"reason,omitempty"`
	Cost *Cost `json:"cost,omitempty" yaml:"cost,omitempty"`
	Inbox *string `json:"inbox,omitempty" yaml:"inbox,omitempty"`
}



// NewMessageWithDefaults instantiates a new Message object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageWithDefaults() *Message {
	this := Message{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Message) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Message) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Message) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Message) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Message) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Message) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Message) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Message) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Message) SetStatus(v string) {
	o.Status = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *Message) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *Message) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *Message) SetReason(v string) {
	o.Reason = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *Message) GetCost() Cost {
	if o == nil || o.Cost == nil {
		var ret Cost
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetCostOk() (*Cost, bool) {
	if o == nil || o.Cost == nil {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *Message) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given Cost and assigns it to the Cost field.
func (o *Message) SetCost(v Cost) {
	o.Cost = &v
}

// GetInbox returns the Inbox field value if set, zero value otherwise.
func (o *Message) GetInbox() string {
	if o == nil || o.Inbox == nil {
		var ret string
		return ret
	}
	return *o.Inbox
}

// GetInboxOk returns a tuple with the Inbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetInboxOk() (*string, bool) {
	if o == nil || o.Inbox == nil {
		return nil, false
	}
	return o.Inbox, true
}

// HasInbox returns a boolean if a field has been set.
func (o *Message) HasInbox() bool {
	if o != nil && o.Inbox != nil {
		return true
	}

	return false
}

// SetInbox gets a reference to the given string and assigns it to the Inbox field.
func (o *Message) SetInbox(v string) {
	o.Inbox = &v
}

func (o Message) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	if o.Inbox != nil {
		toSerialize["inbox"] = o.Inbox
	}
	return json.Marshal(toSerialize)
}

type OptionalMessage struct {
	value *Message
	set bool
}

func (v OptionalMessage) Get() *Message {
	return v.value
}

func (v *OptionalMessage) Set(val *Message) {
	v.value = val
	v.set = true
}

func (v OptionalMessage) IsSet() bool {
	return v.set
}

func (v *OptionalMessage) Unset() {
	v.value = nil
	v.set = false
}

func NewOptionalMessage(val *Message) *OptionalMessage {
	return &OptionalMessage{value: val, set: true}
}

func (v OptionalMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *OptionalMessage) UnmarshalJSON(src []byte) error {
	v.set = true
	return json.Unmarshal(src, &v.value)
}


