/*
Swagger Petstore - OpenAPI 3.0

This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

API version: 1.0.0
Contact: edson@michaque.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package buzi

import (
	"encoding/json"
)

// CreateMessageInput struct for CreateMessageInput
type CreateMessageInput struct {
	To []string `json:"to,omitempty" yaml:"to,omitempty"`
	From *string `json:"from,omitempty" yaml:"from,omitempty"`
	NetworkId *int32 `json:"network_id,omitempty" yaml:"network_id,omitempty"`
	CallbackUrl *string `json:"callback_url,omitempty" yaml:"callback_url,omitempty"`
}



// NewCreateMessageInputWithDefaults instantiates a new CreateMessageInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMessageInputWithDefaults() *CreateMessageInput {
	this := CreateMessageInput{}
	return &this
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *CreateMessageInput) GetTo() []string {
	if o == nil || o.To == nil {
		var ret []string
		return ret
	}
	return o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMessageInput) GetToOk() ([]string, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *CreateMessageInput) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given []string and assigns it to the To field.
func (o *CreateMessageInput) SetTo(v []string) {
	o.To = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *CreateMessageInput) GetFrom() string {
	if o == nil || o.From == nil {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMessageInput) GetFromOk() (*string, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *CreateMessageInput) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *CreateMessageInput) SetFrom(v string) {
	o.From = &v
}

// GetNetworkId returns the NetworkId field value if set, zero value otherwise.
func (o *CreateMessageInput) GetNetworkId() int32 {
	if o == nil || o.NetworkId == nil {
		var ret int32
		return ret
	}
	return *o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMessageInput) GetNetworkIdOk() (*int32, bool) {
	if o == nil || o.NetworkId == nil {
		return nil, false
	}
	return o.NetworkId, true
}

// HasNetworkId returns a boolean if a field has been set.
func (o *CreateMessageInput) HasNetworkId() bool {
	if o != nil && o.NetworkId != nil {
		return true
	}

	return false
}

// SetNetworkId gets a reference to the given int32 and assigns it to the NetworkId field.
func (o *CreateMessageInput) SetNetworkId(v int32) {
	o.NetworkId = &v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *CreateMessageInput) GetCallbackUrl() string {
	if o == nil || o.CallbackUrl == nil {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMessageInput) GetCallbackUrlOk() (*string, bool) {
	if o == nil || o.CallbackUrl == nil {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *CreateMessageInput) HasCallbackUrl() bool {
	if o != nil && o.CallbackUrl != nil {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *CreateMessageInput) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

func (o CreateMessageInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if o.NetworkId != nil {
		toSerialize["network_id"] = o.NetworkId
	}
	if o.CallbackUrl != nil {
		toSerialize["callback_url"] = o.CallbackUrl
	}
	return json.Marshal(toSerialize)
}

type OptionalCreateMessageInput struct {
	value *CreateMessageInput
	set bool
}

func (v OptionalCreateMessageInput) Get() *CreateMessageInput {
	return v.value
}

func (v *OptionalCreateMessageInput) Set(val *CreateMessageInput) {
	v.value = val
	v.set = true
}

func (v OptionalCreateMessageInput) IsSet() bool {
	return v.set
}

func (v *OptionalCreateMessageInput) Unset() {
	v.value = nil
	v.set = false
}

func NewOptionalCreateMessageInput(val *CreateMessageInput) *OptionalCreateMessageInput {
	return &OptionalCreateMessageInput{value: val, set: true}
}

func (v OptionalCreateMessageInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *OptionalCreateMessageInput) UnmarshalJSON(src []byte) error {
	v.set = true
	return json.Unmarshal(src, &v.value)
}


